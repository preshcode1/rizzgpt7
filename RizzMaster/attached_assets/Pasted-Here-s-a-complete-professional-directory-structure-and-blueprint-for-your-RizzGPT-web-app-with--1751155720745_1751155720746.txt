Here’s a **complete, professional directory structure and blueprint** for your RizzGPT web app with email/password authentication, dashboard, chat, redeem code, and all essential modern features. This is ready to use with GitHub Copilot in VS Code!

---

```plaintext
rizzgpt/
├── components/
│   ├── ChatBox.jsx
│   ├── DashboardMenu.jsx
│   ├── Header.jsx
│   ├── LoginForm.jsx
│   ├── RegisterForm.jsx
│   ├── RedeemForm.jsx
│   └── UserProfileCard.jsx
├── lib/
│   ├── auth.js          # Auth helpers (JWT, password hashing, cookies)
│   └── prisma.js        # Prisma client setup
├── pages/
│   ├── api/
│   │   ├── auth/
│   │   │   ├── login.js
│   │   │   ├── logout.js
│   │   │   └── register.js
│   │   ├── chat.js
│   │   ├── redeem.js
│   │   └── session.js   # For checking current user/session in client
│   ├── chat.jsx
│   ├── dashboard.jsx
│   ├── index.jsx
│   ├── login.jsx
│   ├── register.jsx
│   └── _app.jsx
├── prisma/
│   └── schema.prisma
├── public/
│   └── (logo, favicon, etc.)
├── styles/
│   ├── globals.css
├── .env
├── .gitignore
├── package.json
├── postcss.config.js
├── tailwind.config.js
└── README.md
```

---

## **Blueprint Explanation**

### **components/**
Reusable UI components:
- `ChatBox.jsx` — ChatGPT-style chat interface  
- `DashboardMenu.jsx` — Sidebar/menu for dashboard navigation  
- `Header.jsx` — Top navigation bar  
- `LoginForm.jsx` — Login form component  
- `RegisterForm.jsx` — Registration form component  
- `RedeemForm.jsx` — Form to input/redeem pro codes  
- `UserProfileCard.jsx` — User info display in dashboard  

### **lib/**
Utility modules:
- `auth.js` — Functions for hashing passwords, generating/verifying JWT, setting/reading cookies  
- `prisma.js` — Prisma client instance for DB access  

### **pages/api/**
API endpoints:
- `auth/register.js` — Register new users  
- `auth/login.js` — Authenticate login  
- `auth/logout.js` — Log out (clear cookie)  
- `chat.js` — Handle chat requests (OpenAI)  
- `redeem.js` — Process code redemption  
- `session.js` — Return current user/session info  

### **pages/**
Frontend routes:
- `chat.jsx` — Main chat UI (protected, for logged-in users)
- `dashboard.jsx` — User dashboard (profile, usage, code redeem, etc.)
- `index.jsx` — Landing/home page
- `login.jsx` — Login page
- `register.jsx` — Registration page
- `_app.jsx` — App wrapper, imports Tailwind

### **prisma/**
- `schema.prisma` — DB schema with User, RedeemCode, Chat

### **public/**
- Static files: logo, favicon

### **styles/**
- `globals.css` — Tailwind and global styles

### **Root files**
- `.env` — DB URL, JWT secret, OpenAI key, etc.
- `tailwind.config.js`, `postcss.config.js`, `.gitignore`, etc.

---

## **How to Start Using Copilot**

1. **Create the folders/files above** in your VS Code project.
2. **Open each file** and type a clear comment or function name (e.g. `// User registration API handler`) and Copilot will generate the code for you.
3. **Use this structure as your guide**—work file by file, and Copilot will pick up your intent for each file if you use meaningful names and comments.

---

## **Optional: Initial Prisma Schema Example**

```prisma name=prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  isPro     Boolean  @default(false)
  createdAt DateTime @default(now())
  codes     RedeemCode[]
  chats     Chat[]
}

model RedeemCode {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  used      Boolean  @default(false)
  usedById  Int?
  usedBy    User?    @relation(fields: [usedById], references: [id])
  createdAt DateTime @default(now())
}

model Chat {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  messages  String   // JSON string: [{role, content}, ...]
  createdAt DateTime @default(now())
}
```

---

If you want, I can give you **starter code for each file** as well—just say the word!  
This structure is fully ready for Copilot and VS Code.